#!/usr/bin/python3
from Network import network
import tensorflow as tf
import cv2
import numpy as np
import sys

def print_usage():
    print("\nUSAGE: ./demo [binary|grayscale] [options]\n")
    print("OPTIONS:")
    print("\t-device\t-- Specify the camera device ID\n")

def exec_binary(net, sess, vc):
    NETWORK_IMAGE_DIMENSIONS = (28, 28)

    rval, frame = vc.read()

    while rval:
        inf_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        inf_image = cv2.resize(inf_image, NETWORK_IMAGE_DIMENSIONS)
        (thresh, inf_image) = cv2.threshold(inf_image, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        inf_image = (255.0*np.ones(np.shape(inf_image))) - inf_image

        cv2.imshow("Scaled Down", inf_image)


        inf_image = inf_image.flatten() / 255.0
        pred = net.inference_one(sess,inf_image)

        pred_txt = str(pred)
        cv2.putText(img=frame, text=pred_txt, org=(450,450), fontFace=cv2.FONT_HERSHEY_COMPLEX,
                fontScale=9, color=[255, 255, 255], thickness=3)

        cv2.imshow("Recognized Digit", frame)
        rval, frame = vc.read()

        key = cv2.waitKey(20)
        if key == 27: #exit on ESC
            break

    cv2.destroyWindow("preview")
    vc.release()

def exec_grayscale(net, sess, vc):
    NETWORK_IMAGE_DIMENSIONS = (28, 28)

    rval, frame = vc.read()

    while rval:
        inf_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        inf_image = cv2.resize(inf_image, NETWORK_IMAGE_DIMENSIONS)
        inf_image = cv2.convertScaleAbs(inf_image, -1, 2.0, 50)
        inf_image = (255 - inf_image)
        #cv2.imshow("Original", frame)
        cv2.imshow("Scaled Down", inf_image)

        inf_image = inf_image.flatten() / 255.0
        pred = net.inference_one(sess,inf_image)

        pred_txt = str(pred)
        cv2.putText(img=frame, text=pred_txt, org=(450,450), fontFace=cv2.FONT_HERSHEY_COMPLEX,
                fontScale=9, color=[255, 255, 255], thickness=3)
        cv2.imshow("Recognized Digit", frame)


        rval, frame = vc.read()


        key = cv2.waitKey(20)
        if key == 27: #exit on ESC
            break

    vc.release()


nargs = len(sys.argv)

if (nargs < 2 or nargs > 4):
    print_usage()
    exit(1)
if sys.argv[1] != 'binary' and sys.argv[1] != 'grayscale':
    print("Please specify either 'binary' or 'grayscale' to launch the demo")
    print_usage()
    sys.exit(1)

#TODO: Check for device id

device = 0
if nargs is 4 and sys.argv[2] == '-device':
    device = int(sys.argv[3])

#Open Device

vc = cv2.VideoCapture(device)

if vc.isOpened():
    rval = True
else:
    print("Please specify a valid device ID")
    print_usage()
    rval = False
    exit(1)

net = network.Network()
net.build()
sess = tf.Session()
net.restore(sess)

print("\nPress ESC to exit the demo")

if sys.argv[1] == "binary":
    exec_binary(net, sess, vc)
if sys.argv[1] == "grayscale":
    exec_grayscale(net, sess, vc)

